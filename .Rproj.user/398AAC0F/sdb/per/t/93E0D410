{
    "contents" : "library(shiny)\nlibrary(plyr)\n\nsource(\"file_io.R\",local=TRUE)\nsource(\"processing.R\",local=TRUE)\nsource(\"plotting.R\",local=TRUE)\n\n\nshinyServer(function(input, output) {\n  \n  # ============== Load Data tab ==================\n  data <- reactive({\n    if (!is.null(input$load.data.filename))\n      load.experiment.file(input$load.data.filename)\n    else\n      NULL\n  })\n  \n  rates <- reactive({\n    if (!is.null(data()))\n      calculate.growth.rates(data())\n    else\n      NULL\n  })\n  \n  output$load.data.file.selector <- renderUI({\n    selectInput(\"load.data.filename\", \"Choose an experiment file (.od):\",\n                choices = get.experiment.filenames(),multiple=T)\n  })\n  \n  output$load.data.summary <- renderPrint({\n    n.plates <- length(unique(data()$plate))\n    if (!is.null(data())) {\n      rates()  # make sure calculations are done on load\n      say(\n        sprintf('Datafile: \"%s\"',input$load.data.filename),\n        if (n.plates == 1)\n          sprintf(\"    1 plate\")\n        else\n          sprintf(\"    %i plates\",n.plates),\n        sprintf(\"    %i data points spanning %0.2f hours\",dim(data())[1],max(data()$time))\n      )\n    } else {\n      cat(\"No data file loaded.\")\n    }\n  })\n  \n  plate.choices <- reactive({\n    choices <- unique(data()$plate)\n    names(choices) <- paste(\"Plate\",choices)\n    choices\n  })\n  \n  # ================ Plate View tab ===================\n  \n  output$plate.view.plate.selector <- renderUI({\n    selectInput(\"plate.view.plate\", \"Select a plate:\",\n                choices = plate.choices())\n  })\n  \n  output$plate.view.plot <- renderPlot({\n    if (input$plate.view.plot.type == \"rates\") {\n      plate <- rates()$rate[rates()$plate == as.numeric(input$plate.view.plate)]\n      plot.96.rates(plate,rate.max=max(rates()$rate))\n    } else {\n      plot.96.curves(data(),rates(),as.numeric(input$plate.view.plate))\n    }\n  })\n  \n  # ================ Well View tab ====================\n  \n  output$well.view.plate.selector <- renderUI({\n    selectInput(\"well.view.plate\", \"Select wells to plot:\",\n                choices = plate.choices())\n  })\n  \n  output$well.view.well.grids <- renderUI({\n    wrapper <- function(plate.id) conditionalPanel(if (input$well.view.plate == plate.id) \"true\" else \"false\",\n                                                   make.plate.grid(plate.id,input))\n    lapply(as.list(plate.choices()),wrapper)\n  })\n  \n  get.active.wells <- function(inputs) {\n    wells <- data.frame()\n    for (plate.id in plate.choices()) {\n      well.names <- generate.well.names(plate.id)\n      for (well in 1:96) {\n        if (inputs[[well.names[well]]])\n          wells <- rbind(wells,data.frame(plate=plate.id,well=well))\n      }\n    }\n    return(wells)\n  }\n  \n  wells <- reactive(get.active.wells(input))\n  output$well.view.plot <- renderPlot({\n    plot.wells(data(),rates(),wells())\n  })\n\n})\n\n\nsay <- function(...) {\n  str <- NULL\n  for (s in list(...)) {\n    if (is.null(str))\n      str <- s\n    else\n      str <- paste(str,s,sep=\"\\n\")\n  }\n  cat(str)\n}\n\ngenerate.well.names <- function(plate.id) {\n  paste(plate.id,\"-\",as.character(1:96),sep=\"\")\n}\n\ntd <- function(...) tags$td(align=\"center\",valign=\"middle\",width=\"20px\",...)\n\nmake.plate.grid <- function(plate.id,input) {\n  col.headings <- c(\"\",as.character(1:12),recursive=T)\n  rows <- vector(\"list\",8)\n  rows[[1]] <- tags$tr(lapply(as.list(col.headings),td))\n  row.headings <- c(\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\")\n  well.names <- paste(plate.id,\"-\",as.character(1:96),sep=\"\")\n  for (i in 1:8) {\n    input.names <- well.names[12*(i-1)+(1:12)]\n    input.strings <- character(12)\n    for (j in 1:12) {\n      name <- input.names[j]\n      to.check <- !is.null(input[[name]]) && input[[name]]\n      input.strings[j] <- paste('<input id=\"',name,'\" type=\"checkbox\" ',\n                                if (to.check) \"checked\" else \"\",'/>',sep=\"\")\n    }\n    final.inputs <- c(row.headings[i],input.strings,recursive=T)\n    rows[[i+1]] <- lapply(as.list(final.inputs),function(x) td(HTML(x)))\n  }\n  tags$table(border=\"1px\",cellpadding=\"3px\",lapply(rows,tags$tr))\n}\n\n\n",
    "created" : 1370008198340.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1115791034",
    "id" : "93E0D410",
    "lastKnownWriteTime" : 1371045880,
    "path" : "~/Dropbox/work/minireader/client/explorer/server.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}